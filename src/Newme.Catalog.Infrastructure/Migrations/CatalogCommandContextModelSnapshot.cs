// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Newme.Catalog.Infrastructure.Persistence;

#nullable disable

namespace Newme.Catalog.Infrastructure.Migrations
{
    [DbContext(typeof(CatalogCommandContext))]
    partial class CatalogCommandContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Newme.Catalog.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("Active");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("CreateDate");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("LastUpdateDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("Caterories", (string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("Newme.Catalog.Domain.Entities.Color", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("Active");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("CreateDate");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("LastUpdateDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("Colors", (string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("Newme.Catalog.Domain.Entities.Gender.Gender", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("Active");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("CreateDate");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("LastUpdateDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("Genders", (string)null);

                    b.UseTpcMappingStrategy();

                    b.HasData(
                        new
                        {
                            Id = new Guid("9d55d531-3f41-4362-ad10-691d1d7eeba3"),
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 22, 21, 6, 48, 260, DateTimeKind.Local).AddTicks(5100),
                            Name = "feminino"
                        },
                        new
                        {
                            Id = new Guid("51f887c7-e4cc-429c-a68a-ab7d3acf76a8"),
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 22, 21, 6, 48, 260, DateTimeKind.Local).AddTicks(5170),
                            Name = "masculino"
                        },
                        new
                        {
                            Id = new Guid("0dd1f514-19e0-4d8b-93a1-8040d9c2ad7e"),
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 22, 21, 6, 48, 260, DateTimeKind.Local).AddTicks(5180),
                            Name = "não se aplica"
                        });
                });

            modelBuilder.Entity("Newme.Catalog.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("Active");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("CreateDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("LastUpdateDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)")
                        .HasColumnName("Name");

                    b.Property<Guid>("Sku")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Sku");

                    b.Property<int>("Stock")
                        .HasColumnType("int")
                        .HasColumnName("Stock");

                    b.HasKey("Id");

                    b.ToTable("Products", (string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("Newme.Catalog.Domain.Entities.Promotion", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("Active");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("CreateDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("LastUpdateDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Name");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProductId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("Promotions", (string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("Newme.Catalog.Domain.Entities.Size", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("Active");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("CreateDate");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("LastUpdateDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("Sizes", (string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("Newme.Catalog.Domain.Entities.Product", b =>
                {
                    b.OwnsOne("Newme.Catalog.Domain.Entities.DifferentialGroup", "DifferentialGroup", b1 =>
                        {
                            b1.Property<Guid>("ProductId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("category")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("CategoryId");

                            b1.Property<Guid>("color")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("ColorId");

                            b1.Property<Guid>("gender")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("GenderId");

                            b1.Property<Guid>("size")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("SizeId");

                            b1.HasKey("ProductId");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("ProductId");
                        });

                    b.OwnsOne("Newme.Catalog.Domain.Entities.Money", "Price", b1 =>
                        {
                            b1.Property<Guid>("ProductId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(2)
                                .HasColumnType("decimal(2,2)")
                                .HasColumnName("Amount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasColumnName("Currency");

                            b1.HasKey("ProductId");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("ProductId");
                        });

                    b.Navigation("DifferentialGroup")
                        .IsRequired();

                    b.Navigation("Price")
                        .IsRequired();
                });

            modelBuilder.Entity("Newme.Catalog.Domain.Entities.Promotion", b =>
                {
                    b.HasOne("Newme.Catalog.Domain.Entities.Product", null)
                        .WithOne("Promotion")
                        .HasForeignKey("Newme.Catalog.Domain.Entities.Promotion", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Newme.Catalog.Domain.Entities.Discount", "Discount", b1 =>
                        {
                            b1.Property<Guid>("PromotionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Percentage")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("Percentage");

                            b1.HasKey("PromotionId");

                            b1.ToTable("Promotions");

                            b1.WithOwner()
                                .HasForeignKey("PromotionId");

                            b1.OwnsOne("Newme.Catalog.Domain.Entities.Money", "Price", b2 =>
                                {
                                    b2.Property<Guid>("DiscountPromotionId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<decimal>("Amount")
                                        .HasColumnType("decimal(18,2)")
                                        .HasColumnName("Amount");

                                    b2.Property<string>("Currency")
                                        .IsRequired()
                                        .HasMaxLength(3)
                                        .HasColumnType("nvarchar(3)")
                                        .HasColumnName("Currency");

                                    b2.HasKey("DiscountPromotionId");

                                    b2.ToTable("Promotions");

                                    b2.WithOwner()
                                        .HasForeignKey("DiscountPromotionId");
                                });

                            b1.Navigation("Price")
                                .IsRequired();
                        });

                    b.OwnsOne("Newme.Catalog.Domain.Entities.Period", "Period", b1 =>
                        {
                            b1.Property<Guid>("PromotionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("end")
                                .HasColumnType("datetime")
                                .HasColumnName("End");

                            b1.Property<DateTime>("start")
                                .HasColumnType("datetime")
                                .HasColumnName("Start");

                            b1.HasKey("PromotionId");

                            b1.ToTable("Promotions");

                            b1.WithOwner()
                                .HasForeignKey("PromotionId");
                        });

                    b.Navigation("Discount")
                        .IsRequired();

                    b.Navigation("Period")
                        .IsRequired();
                });

            modelBuilder.Entity("Newme.Catalog.Domain.Entities.Product", b =>
                {
                    b.Navigation("Promotion");
                });
#pragma warning restore 612, 618
        }
    }
}
